comment "//" ;
comment "/*" "*/" ;

Program . Program ::= [Declaration] [Statement] ;

PrimDecl . Declaration ::= "int" Ident ;
ArrayDecl . Declaration ::= "int" "[" Integer "]" Ident ;
RecordDecl . Declaration ::= "{" [Field] "}" Ident ;

Field . Field ::= "int" Ident ;
(:[]) . [Field] ::= Field ;
(:) . [Field] ::= Field ";" [Field] ;

[] . [Declaration] ::= ;
(:) . [Declaration] ::= Declaration ";" [Declaration] ;

[] . [Statement] ::= ;
(:) . [Statement] ::= Statement [Statement] ;

Variable . ROVSuffix ::= Arith ;
Record . ROVSuffix ::= "(" [Arith] ")" ;

(:[]) . [Arith] ::= Arith ;
(:) . [Arith] ::= Arith "," [Arith] ;

Assignment . Statement ::= LValue ":=" Arith ";" ;
RecordOrVariable . Statement ::= Ident ":=" ROVSuffix ";" ;
IfThen . Statement ::= "if" "(" Boolean ")" "{" [Statement] "}" ;
IfThenElse . Statement ::= "if" "(" Boolean ")" "{" [Statement] "}" "else" "{" [Statement] "}" ;
While . Statement ::= "while" "(" Boolean ")" "{" [Statement] "}" ;
ReadL . Statement ::= "read" LValue ";" ;
ReadI . Statement ::= "read" Ident ";" ;
Write . Statement ::= "write" Arith ";" ;
Continue . Statement ::= "continue" ";" ;
Break . Statement ::= "break" ";" ;

Array . LValue ::= Ident "[" Arith "]" ;
RecordField . LValue ::= Ident "." Ident ;

NegLiteral . Arith4 ::= "-" Integer ;
Literal . Arith4 ::= Integer ;
ArrRecordR . Arith4 ::= LValue ;
VariableR . Arith4 ::= Ident ;
Mod . Arith3 ::= Arith3 "%" Arith4 ;
Div . Arith3 ::= Arith3 "/" Arith4 ;
Mult . Arith3 ::= Arith3 "*" Arith4 ;
Plus . Arith2 ::= Arith2 "+" Arith3 ;
Minus . Arith2 ::= Arith2 "-" Arith3 ;

_ . Arith4 ::= "(" Arith ")" ;
_ . Arith3 ::= Arith4 ;
_ . Arith2 ::= Arith3 ;
_ . Arith1 ::= Arith2 ;
_ . Arith ::= Arith1 ;

True . Boolean3 ::= "true" ;
False . Boolean3 ::= "false" ;
Relation . Boolean3 ::= Arith OpRel Arith ;
Not . Boolean2 ::= "not" Boolean3 ;
And . Boolean1 ::= Boolean1 "&&" Boolean2 ;
Or . Boolean ::= Boolean "||" Boolean1 ;

_ . Boolean3 ::= "(" Boolean ")" ;
_ . Boolean2 ::= Boolean3 ;
_ . Boolean1 ::= Boolean2 ;
_ . Boolean ::= Boolean1 ;

LT . OpRel ::= "<";
LTE . OpRel ::= "<=";
GT . OpRel ::= ">";
GTE . OpRel ::= ">=";
EQ . OpRel ::= "==";
NEQ . OpRel ::= "!=";
