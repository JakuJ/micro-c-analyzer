Program . Program ::= [Declaration] [Statement] ;

PrimDecl . Declaration ::= "int" Ident ;
ArrayDecl . Declaration ::= "int" "[" Integer "]" Ident ;
RecordDecl . Declaration ::= "{" [Field] "}" Ident ;

Field . Field ::= "int" Ident ;
(:[]) . [Field] ::= Field ;
(:) . [Field] ::= Field ";" [Field] ;

[] . [Declaration] ::= ;
(:) . [Declaration] ::= Declaration ";" [Declaration] ;

[] . [Statement] ::= ;
(:) . [Statement] ::= Statement [Statement] ;

comment "/*" "*/" ;

Variable . ROVSuffix ::= Arith ;
Record . ROVSuffix ::= "(" [Arith] ")" ;

(:[]) . [Arith] ::= Arith ;
(:) . [Arith] ::= Arith "," [Arith] ;

Assignment . Statement ::= LValue ":=" Arith ";" ;
RecordOrVariable . Statement ::= Ident ":=" ROVSuffix ";" ;
IfThen . Statement ::= "if" "(" Boolean ")" "{" [Statement] "}" ;
IfThenElse . Statement ::= "if" "(" Boolean ")" "{" [Statement] "}" "else" "{" [Statement] "}" ;
While . Statement ::= "while" "(" Boolean ")" "{" [Statement] "}" ;
ReadL . Statement ::= "read" LValue ";" ;
ReadI . Statement ::= "read" Ident ";" ;
Write . Statement ::= "write" Arith ";" ;

Array . LValue ::= Ident "[" Arith "]" ;
RecordField . LValue ::= Ident "." Ident ;

Lit . LitArith ::= Integer;
LitNeg . LitArith ::= "-" Integer;

Literal . Arith ::= LitArith ;
VariableR . Arith ::= LValue ;
AppArith . Arith ::= Arith OpA Arith ;
Parens . Arith ::= "(" Arith ")" ;

True . Boolean ::= "true" ;
False . Boolean ::= "false" ;
AppRel . Boolean ::= Arith OpRel Arith ;
AppBoolean . Boolean ::= Boolean OpBoolean Boolean ;
Not . Boolean ::= "not" Boolean ;

Plus . OpA ::= "+" ;
Minus . OpA ::= "-" ;
Mult . OpA ::= "*" ;
Div . OpA ::= "/" ;

LT . OpRel ::= "<";
LTE . OpRel ::= "<=";
GT . OpRel ::= ">";
GTE . OpRel ::= ">=";
EQ . OpRel ::= "==";
NEQ . OpRel ::= "!=";

And . OpBoolean ::= "&";
Or . OpBoolean ::= "|";
